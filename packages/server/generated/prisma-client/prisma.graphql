type AggregatePopup {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createPopup(data: PopupCreateInput!): Popup!
  updatePopup(data: PopupUpdateInput!, where: PopupWhereUniqueInput!): Popup
  updateManyPopups(data: PopupUpdateManyMutationInput!, where: PopupWhereInput): BatchPayload!
  upsertPopup(where: PopupWhereUniqueInput!, create: PopupCreateInput!, update: PopupUpdateInput!): Popup!
  deletePopup(where: PopupWhereUniqueInput!): Popup
  deleteManyPopups(where: PopupWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Popup {
  id: ID!
  elementId: ID!
  URL: String
  name: String!
  text: String
  location: String!
}

type PopupConnection {
  pageInfo: PageInfo!
  edges: [PopupEdge]!
  aggregate: AggregatePopup!
}

input PopupCreateInput {
  elementId: ID!
  URL: String
  name: String!
  text: String
  location: String!
}

type PopupEdge {
  node: Popup!
  cursor: String!
}

enum PopupOrderByInput {
  id_ASC
  id_DESC
  elementId_ASC
  elementId_DESC
  URL_ASC
  URL_DESC
  name_ASC
  name_DESC
  text_ASC
  text_DESC
  location_ASC
  location_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PopupPreviousValues {
  id: ID!
  elementId: ID!
  URL: String
  name: String!
  text: String
  location: String!
}

type PopupSubscriptionPayload {
  mutation: MutationType!
  node: Popup
  updatedFields: [String!]
  previousValues: PopupPreviousValues
}

input PopupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PopupWhereInput
  AND: [PopupSubscriptionWhereInput!]
  OR: [PopupSubscriptionWhereInput!]
  NOT: [PopupSubscriptionWhereInput!]
}

input PopupUpdateInput {
  elementId: ID
  URL: String
  name: String
  text: String
  location: String
}

input PopupUpdateManyMutationInput {
  elementId: ID
  URL: String
  name: String
  text: String
  location: String
}

input PopupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  elementId: ID
  elementId_not: ID
  elementId_in: [ID!]
  elementId_not_in: [ID!]
  elementId_lt: ID
  elementId_lte: ID
  elementId_gt: ID
  elementId_gte: ID
  elementId_contains: ID
  elementId_not_contains: ID
  elementId_starts_with: ID
  elementId_not_starts_with: ID
  elementId_ends_with: ID
  elementId_not_ends_with: ID
  URL: String
  URL_not: String
  URL_in: [String!]
  URL_not_in: [String!]
  URL_lt: String
  URL_lte: String
  URL_gt: String
  URL_gte: String
  URL_contains: String
  URL_not_contains: String
  URL_starts_with: String
  URL_not_starts_with: String
  URL_ends_with: String
  URL_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  AND: [PopupWhereInput!]
  OR: [PopupWhereInput!]
  NOT: [PopupWhereInput!]
}

input PopupWhereUniqueInput {
  id: ID
}

type Query {
  popup(where: PopupWhereUniqueInput!): Popup
  popups(where: PopupWhereInput, orderBy: PopupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Popup]!
  popupsConnection(where: PopupWhereInput, orderBy: PopupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PopupConnection!
  node(id: ID!): Node
}

type Subscription {
  popup(where: PopupSubscriptionWhereInput): PopupSubscriptionPayload
}
